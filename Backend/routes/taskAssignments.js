// const express = require('express');
// const router = express.Router();
// const db = require('../models/db');

// // CRUD cho Task_Assignment
// router.get('/', async (req, res) => {
//   const [rows] = await db.query('SELECT * FROM Task_Assignment');
//   res.json(rows);
// });

// router.get('/:id', async (req, res) => {
//   const [row] = await db.query('SELECT * FROM Task_Assignment WHERE assignment_id = ?', [req.params.id]);
//   res.json(row[0]);
// });

// router.post('/', async (req, res) => {
//   const { task_id, user_id, assigned_by, completion_percentage, status } = req.body;
//   const [result] = await db.query(
//     'INSERT INTO Task_Assignment (task_id, user_id, assigned_by, completion_percentage, status) VALUES (?, ?, ?, ?, ?)',
//     [task_id, user_id, assigned_by, completion_percentage, status]
//   );
//   res.json({ assignment_id: result.insertId });
// });

// router.put('/:id', async (req, res) => {
//   const { completion_percentage, status } = req.body;
//   await db.query(
//     'UPDATE Task_Assignment SET completion_percentage = ?, status = ? WHERE assignment_id = ?',
//     [completion_percentage, status, req.params.id]
//   );
//   res.json({ message: 'C·∫≠p nh·∫≠t ph√¢n c√¥ng th√†nh c√¥ng' });
// });

// router.delete('/:id', async (req, res) => {
//   await db.query('DELETE FROM Task_Assignment WHERE assignment_id = ?', [req.params.id]);
//   res.json({ message: 'ƒê√£ x√≥a ph√¢n c√¥ng' });
// });

// module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../models/db');

// GET: Danh s√°ch to√†n b·ªô ph√¢n c√¥ng
router.get('/', async (req, res) => {
  const [rows] = await db.query('SELECT * FROM Task_Assignment');
  res.json(rows);
});

// GET: M·ªôt ph√¢n c√¥ng c·ª• th·ªÉ
router.get('/:id', async (req, res) => {
  const [row] = await db.query(
    'SELECT * FROM Task_Assignment WHERE assignment_id = ?',
    [req.params.id]
  );
  res.json(row[0]);
});

// POST: Giao task cho ng∆∞·ªùi d√πng v√† g·ª≠i th√¥ng b√°o cho to√†n b·ªô th√†nh vi√™n d·ª± √°n
router.post('/', async (req, res) => {
  const { task_id, user_id, assigned_by, completion_percentage, status } = req.body;

  try {
    // T·∫°o ph√¢n c√¥ng
    const [result] = await db.query(
      `INSERT INTO Task_Assignment (task_id, user_id, assigned_by, completion_percentage, status)
       VALUES (?, ?, ?, ?, ?)`,
      [task_id, user_id, assigned_by, completion_percentage, status]
    );

    // L·∫•y th√¥ng tin task v√† project
    const [[task]] = await db.query(
      'SELECT task_title, sprint_backlog_id FROM Tasks WHERE task_id = ?',
      [task_id]
    );

    const [[projectRow]] = await db.query(
      'SELECT project_id FROM Sprint_Backlog WHERE sprint_backlog_id = ?',
      [task.sprint_backlog_id]
    );

    const project_id = projectRow.project_id;

    // L·∫•y t·∫•t c·∫£ th√†nh vi√™n c·ªßa d·ª± √°n
    const [members] = await db.query(
      `SELECT user_id FROM User_Project WHERE project_id = ? AND status = 'accepted'`,
      [project_id]
    );

    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n
    const insertPromises = members.map((member) =>
      db.query(
        `INSERT INTO Notifications (user_id, project_id, message, related_project, related_task)
         VALUES (?, ?, ?, ?, ?)`,
        [
          member.user_id,
          project_id,
          `üìå C√¥ng vi·ªác m·ªõi ƒë∆∞·ª£c giao: ${task.task_title}`,
          project_id,
          task_id
        ]
      )
    );
    await Promise.all(insertPromises);

    res.json({ assignment_id: result.insertId });
  } catch (err) {
    console.error("‚ùå L·ªói khi giao task:", err.message);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ ph√¢n c√¥ng task' });
  }
});

// PUT: C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√¢n c√¥ng v√† g·ª≠i th√¥ng b√°o n·∫øu ho√†n th√†nh
router.put('/:id', async (req, res) => {
  const { completion_percentage, status } = req.body;

  try {
    // L·∫•y th√¥ng tin c≈© ƒë·ªÉ bi·∫øt task v√† user
    const [[assignment]] = await db.query(
      'SELECT * FROM Task_Assignment WHERE assignment_id = ?',
      [req.params.id]
    );

    if (!assignment)
      return res.status(404).json({ message: 'Ph√¢n c√¥ng kh√¥ng t·ªìn t·∫°i' });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    await db.query(
      `UPDATE Task_Assignment SET completion_percentage = ?, status = ? WHERE assignment_id = ?`,
      [completion_percentage, status, req.params.id]
    );

    // N·∫øu task ho√†n th√†nh ‚Üí th√¥ng b√°o cho t·∫•t c·∫£ th√†nh vi√™n d·ª± √°n
    if (status === 'Completed') {
      const [[task]] = await db.query(
        'SELECT task_title, sprint_backlog_id FROM Tasks WHERE task_id = ?',
        [assignment.task_id]
      );
      const [[projectRow]] = await db.query(
        'SELECT project_id FROM Sprint_Backlog WHERE sprint_backlog_id = ?',
        [task.sprint_backlog_id]
      );

      const project_id = projectRow.project_id;

      const [members] = await db.query(
        `SELECT user_id FROM User_Project WHERE project_id = ? AND status = 'accepted'`,
        [project_id]
      );

      const insertPromises = members.map((member) =>
        db.query(
          `INSERT INTO Notifications (user_id, project_id, message, related_project, related_task)
           VALUES (?, ?, ?, ?, ?)`,
          [
            member.user_id,
            project_id,
            `‚úÖ C√¥ng vi·ªác "${task.task_title}" ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh.`,
            project_id,
            assignment.task_id
          ]
        )
      );
      await Promise.all(insertPromises);
    }

    res.json({ message: 'C·∫≠p nh·∫≠t ph√¢n c√¥ng th√†nh c√¥ng' });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t task assignment:", err.message);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph√¢n c√¥ng' });
  }
});

// DELETE: X√≥a ph√¢n c√¥ng
router.delete('/:id', async (req, res) => {
  try {
    await db.query(
      'DELETE FROM Task_Assignment WHERE assignment_id = ?',
      [req.params.id]
    );
    res.json({ message: 'ƒê√£ x√≥a ph√¢n c√¥ng' });
  } catch (err) {
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a ph√¢n c√¥ng' });
  }
});

module.exports = router;
